2023-10-07 15:36:08

--------------------------------------------------
Code:
import pandas as pd

Outputs:

--------------------------------------------------

Code:
# Read txt file line by line and store to a list
with open('C:/Users/hifia/Projects/NASA SpaceApps/Datasets/Real_Time_Data.txt', 'r') as f:
    lines = f.readlines()
    lines = [line.strip() for line in lines]

print(lines[0:5])

Outputs:

--------------------------------------------------

Code:
import re

def compress_whitespace(input_string):
    # Use a regular expression to replace multiple whitespaces with a single space
    compressed_string = re.sub(r'\s+', ' ', input_string)
    return compressed_string

# Example usage:
fixed = []
for i in lines:
    fixed.append(compress_whitespace(i))


Outputs:

--------------------------------------------------

Code:
print(fixed[0:5])

Outputs:
['\ufeffTimestamp Source Bt-med Bt-min Bt-max Bx-med Bx-min Bx-max By-med By-min By-max Bz-med Bz-min Bz-max Phi-mean Phi-min Phi-max Theta-med Theta-min Theta-max Dens-med Dens-min Dens-max Speed-med Speed-min Speed-max Temp-med Temp-min Temp-max', '2022-10-31 12:00:00 1 4.96 3.41 5.55 1.45 -2.51 3.03 2.80 -4.01 4.54 -3.52 -4.92 -0.71 57.80 1.85 345.43 -46.77 -74.26 -8.52 9.77 6.08 10.79 479.40 457.20 497.00 255620 119723 306989', '2022-10-31 18:00:00 1 4.89 3.58 6.40 -0.49 -3.86 4.89 3.92 0.39 5.53 -0.05 -4.86 3.28 94.77 11.35 157.49 -0.69 -65.95 44.38 10.04 6.29 11.21 471.70 450.30 502.40 246035 123225 291427', '2022-11-01 00:00:00 1 4.66 3.25 5.14 -3.18 -4.66 4.58 0.81 -1.46 3.61 1.91 -4.59 3.98 151.58 0.41 358.68 24.39 -67.33 63.67 8.18 5.43 11.14 462.30 442.90 488.50 202911 98993 329715', '2022-11-01 06:00:00 1 4.03 2.52 5.09 -0.49 -3.71 3.32 1.84 -1.97 3.81 -2.27 -4.77 2.42 106.18 10.34 345.32 -36.56 -79.57 37.08 7.97 4.47 10.04 462.10 427.50 483.60 222950 94413 307277']

--------------------------------------------------

Code:
import csv
import os

os.chdir('C:/Users/hifia/Projects/NASA SpaceApps/Datasets/')
# Define the CSV file name
csv_file_name = 'Real_Time_Data.csv'

# Split the headers and entries
headers = fixed[0].split()
entries = [entry.split() for entry in fixed[1:]]

# Write data to the CSV file
with open(csv_file_name, 'w', newline='') as csv_file:
    csv_writer = csv.writer(csv_file)
    
    # Write the headers
    csv_writer.writerow(headers)
    
    # Write the entries
    csv_writer.writerows(entries)

print(f'Data has been written to {csv_file_name}')


Outputs:
Data has been written to Real_Time_Data.csv

--------------------------------------------------

Code:
import pandas as pd
df = pd.read_csv('../Datasets/Real_Time_Data.csv')
df1 = df.copy()

Outputs:

--------------------------------------------------

Code:
pd.DataFrame(pd.read_json('../Datasets/Kp.json')).to_csv('../Datasets/Kp.csv', index=False)

Outputs:

--------------------------------------------------

Code:
# Load the CSV file into a DataFrame
df = pd.read_csv('../Datasets/Kp.csv')

# Convert the 'datetime' column to a datetime object
df['datetime'] = pd.to_datetime(df['datetime'])

# Format the 'datetime' column to remove the timezone information
df['datetime'] = df['datetime'].dt.strftime('%Y-%m-%d %H:%M:%S')

# Save the DataFrame back to the CSV file
df.to_csv('../Datasets/Kp.csv', index=False)

Outputs:

--------------------------------------------------

Code:
# Load CSV1 and CSV2 into DataFrames
df1 = pd.read_csv('../Datasets/Real_Time_Data.csv', parse_dates=['Timestamp'])
df2 = pd.read_csv('../Datasets/Kp.csv', parse_dates=['datetime'])

df1['Timestamp'] = pd.to_datetime(df1['Timestamp'], format='%d-%m-%Y %H:%M')
df2['datetime'] = pd.to_datetime(df2['datetime'], format='%d-%m-%Y %H:%M')

# Merge the DataFrames based on the 'Timestamp' and 'datetime' columns
merged_df = df1.merge(df2, left_on='Timestamp', right_on='datetime', how='left')

# Drop the duplicate 'datetime' column
merged_df = merged_df.drop(columns=['datetime'])

# Save the merged DataFrame back to CSV1
merged_df.to_csv('CSV1_updated.csv', index=False)

Outputs:
C:\Users\hifia\AppData\Local\Temp\ipykernel_18936\3320324026.py:2: UserWarning: Parsing dates in %d-%m-%Y %H:%M format when dayfirst=False (the default) was specified. Pass `dayfirst=True` or specify a format to silence this warning.
  df1 = pd.read_csv('../Datasets/Real_Time_Data.csv', parse_dates=['Timestamp'])

--------------------------------------------------

Code:
df = pd.read_csv('Final1.csv').dropna(subset=['Kp'])

# Save the DataFrame back to the CSV file
df.to_csv('Final2.csv', index=False)

Outputs:

--------------------------------------------------


--------------------------------------------------

--------------------------------------------------

2023-10-07 15:59:20

--------------------------------------------------
Code:
import pandas as pd

Outputs:

--------------------------------------------------

Code:
# Read txt file line by line and store to a list
with open('C:/Users/hifia/Projects/NASA SpaceApps/Datasets/Real_Time_Data.txt', 'r') as f:
    lines = f.readlines()
    lines = [line.strip() for line in lines]

print(lines[0:5])

Outputs:

--------------------------------------------------

Code:
import re

def compress_whitespace(input_string):
    # Use a regular expression to replace multiple whitespaces with a single space
    compressed_string = re.sub(r'\s+', ' ', input_string)
    return compressed_string

# Example usage:
fixed = []
for i in lines:
    fixed.append(compress_whitespace(i))


Outputs:

--------------------------------------------------

Code:
print(fixed[0:5])

Outputs:
['\ufeffTimestamp Source Bt-med Bt-min Bt-max Bx-med Bx-min Bx-max By-med By-min By-max Bz-med Bz-min Bz-max Phi-mean Phi-min Phi-max Theta-med Theta-min Theta-max Dens-med Dens-min Dens-max Speed-med Speed-min Speed-max Temp-med Temp-min Temp-max', '2022-10-31 12:00:00 1 4.96 3.41 5.55 1.45 -2.51 3.03 2.80 -4.01 4.54 -3.52 -4.92 -0.71 57.80 1.85 345.43 -46.77 -74.26 -8.52 9.77 6.08 10.79 479.40 457.20 497.00 255620 119723 306989', '2022-10-31 18:00:00 1 4.89 3.58 6.40 -0.49 -3.86 4.89 3.92 0.39 5.53 -0.05 -4.86 3.28 94.77 11.35 157.49 -0.69 -65.95 44.38 10.04 6.29 11.21 471.70 450.30 502.40 246035 123225 291427', '2022-11-01 00:00:00 1 4.66 3.25 5.14 -3.18 -4.66 4.58 0.81 -1.46 3.61 1.91 -4.59 3.98 151.58 0.41 358.68 24.39 -67.33 63.67 8.18 5.43 11.14 462.30 442.90 488.50 202911 98993 329715', '2022-11-01 06:00:00 1 4.03 2.52 5.09 -0.49 -3.71 3.32 1.84 -1.97 3.81 -2.27 -4.77 2.42 106.18 10.34 345.32 -36.56 -79.57 37.08 7.97 4.47 10.04 462.10 427.50 483.60 222950 94413 307277']

--------------------------------------------------

Code:
import csv
import os

os.chdir('C:/Users/hifia/Projects/NASA SpaceApps/Datasets/')
# Define the CSV file name
csv_file_name = 'Real_Time_Data.csv'

# Split the headers and entries
headers = fixed[0].split()
entries = [entry.split() for entry in fixed[1:]]

# Write data to the CSV file
with open(csv_file_name, 'w', newline='') as csv_file:
    csv_writer = csv.writer(csv_file)
    
    # Write the headers
    csv_writer.writerow(headers)
    
    # Write the entries
    csv_writer.writerows(entries)

print(f'Data has been written to {csv_file_name}')


Outputs:
Data has been written to Real_Time_Data.csv

--------------------------------------------------

Code:
import pandas as pd
df = pd.read_csv('../Datasets/Real_Time_Data.csv')
df1 = df.copy()

Outputs:

--------------------------------------------------

Code:
pd.DataFrame(pd.read_json('../Datasets/Kp.json')).to_csv('../Datasets/Kp.csv', index=False)

Outputs:

--------------------------------------------------

Code:
# Load the CSV file into a DataFrame
df = pd.read_csv('../Datasets/Kp.csv')

# Convert the 'datetime' column to a datetime object
df['datetime'] = pd.to_datetime(df['datetime'])

# Format the 'datetime' column to remove the timezone information
df['datetime'] = df['datetime'].dt.strftime('%Y-%m-%d %H:%M:%S')

# Save the DataFrame back to the CSV file
df.to_csv('../Datasets/Kp.csv', index=False)

Outputs:

--------------------------------------------------

Code:
# Load CSV1 and CSV2 into DataFrames
df1 = pd.read_csv('../Datasets/Real_Time_Data.csv', parse_dates=['Timestamp'])
df2 = pd.read_csv('../Datasets/Kp.csv', parse_dates=['datetime'])

df1['Timestamp'] = pd.to_datetime(df1['Timestamp'], format='%d-%m-%Y %H:%M')
df2['datetime'] = pd.to_datetime(df2['datetime'], format='%d-%m-%Y %H:%M')

# Merge the DataFrames based on the 'Timestamp' and 'datetime' columns
merged_df = df1.merge(df2, left_on='Timestamp', right_on='datetime', how='left')

# Drop the duplicate 'datetime' column
merged_df = merged_df.drop(columns=['datetime'])

# Save the merged DataFrame back to CSV1
merged_df.to_csv('CSV1_updated.csv', index=False)

Outputs:
C:\Users\hifia\AppData\Local\Temp\ipykernel_18936\3320324026.py:2: UserWarning: Parsing dates in %d-%m-%Y %H:%M format when dayfirst=False (the default) was specified. Pass `dayfirst=True` or specify a format to silence this warning.
  df1 = pd.read_csv('../Datasets/Real_Time_Data.csv', parse_dates=['Timestamp'])

--------------------------------------------------

Code:
df = pd.read_csv('Final1.csv').dropna(subset=['Kp'])

# Save the DataFrame back to the CSV file
df.to_csv('Final2.csv', index=False)

Outputs:

--------------------------------------------------


--------------------------------------------------

--------------------------------------------------

2023-10-07 16:01:54

--------------------------------------------------
Code:
import pandas as pd

Outputs:

--------------------------------------------------

Code:
# Read txt file line by line and store to a list
with open('C:/Users/hifia/Projects/NASA SpaceApps/Datasets/Real_Time_Data.txt', 'r') as f:
    lines = f.readlines()
    lines = [line.strip() for line in lines]

print(lines[0:5])

Outputs:

--------------------------------------------------

Code:
import re

def compress_whitespace(input_string):
    # Use a regular expression to replace multiple whitespaces with a single space
    compressed_string = re.sub(r'\s+', ' ', input_string)
    return compressed_string

# Example usage:
fixed = []
for i in lines:
    fixed.append(compress_whitespace(i))


Outputs:

--------------------------------------------------

Code:
print(fixed[0:5])

Outputs:
['\ufeffTimestamp Source Bt-med Bt-min Bt-max Bx-med Bx-min Bx-max By-med By-min By-max Bz-med Bz-min Bz-max Phi-mean Phi-min Phi-max Theta-med Theta-min Theta-max Dens-med Dens-min Dens-max Speed-med Speed-min Speed-max Temp-med Temp-min Temp-max', '2022-10-31 12:00:00 1 4.96 3.41 5.55 1.45 -2.51 3.03 2.80 -4.01 4.54 -3.52 -4.92 -0.71 57.80 1.85 345.43 -46.77 -74.26 -8.52 9.77 6.08 10.79 479.40 457.20 497.00 255620 119723 306989', '2022-10-31 18:00:00 1 4.89 3.58 6.40 -0.49 -3.86 4.89 3.92 0.39 5.53 -0.05 -4.86 3.28 94.77 11.35 157.49 -0.69 -65.95 44.38 10.04 6.29 11.21 471.70 450.30 502.40 246035 123225 291427', '2022-11-01 00:00:00 1 4.66 3.25 5.14 -3.18 -4.66 4.58 0.81 -1.46 3.61 1.91 -4.59 3.98 151.58 0.41 358.68 24.39 -67.33 63.67 8.18 5.43 11.14 462.30 442.90 488.50 202911 98993 329715', '2022-11-01 06:00:00 1 4.03 2.52 5.09 -0.49 -3.71 3.32 1.84 -1.97 3.81 -2.27 -4.77 2.42 106.18 10.34 345.32 -36.56 -79.57 37.08 7.97 4.47 10.04 462.10 427.50 483.60 222950 94413 307277']

--------------------------------------------------

Code:
import csv
import os

os.chdir('C:/Users/hifia/Projects/NASA SpaceApps/Datasets/')
# Define the CSV file name
csv_file_name = 'Real_Time_Data.csv'

# Split the headers and entries
headers = fixed[0].split()
entries = [entry.split() for entry in fixed[1:]]

# Write data to the CSV file
with open(csv_file_name, 'w', newline='') as csv_file:
    csv_writer = csv.writer(csv_file)
    
    # Write the headers
    csv_writer.writerow(headers)
    
    # Write the entries
    csv_writer.writerows(entries)

print(f'Data has been written to {csv_file_name}')


Outputs:
Data has been written to Real_Time_Data.csv

--------------------------------------------------

Code:
import pandas as pd
df = pd.read_csv('../Datasets/Real_Time_Data.csv')
df1 = df.copy()

Outputs:

--------------------------------------------------

Code:
pd.DataFrame(pd.read_json('../Datasets/Kp.json')).to_csv('../Datasets/Kp.csv', index=False)

Outputs:

--------------------------------------------------

Code:
# Load the CSV file into a DataFrame
df = pd.read_csv('../Datasets/Kp.csv')

# Convert the 'datetime' column to a datetime object
df['datetime'] = pd.to_datetime(df['datetime'])

# Format the 'datetime' column to remove the timezone information
df['datetime'] = df['datetime'].dt.strftime('%Y-%m-%d %H:%M:%S')

# Save the DataFrame back to the CSV file
df.to_csv('../Datasets/Kp.csv', index=False)

Outputs:

--------------------------------------------------

Code:
# Load CSV1 and CSV2 into DataFrames
df1 = pd.read_csv('../Datasets/Real_Time_Data.csv', parse_dates=['Timestamp'])
df2 = pd.read_csv('../Datasets/Kp.csv', parse_dates=['datetime'])

df1['Timestamp'] = pd.to_datetime(df1['Timestamp'], format='%d-%m-%Y %H:%M')
df2['datetime'] = pd.to_datetime(df2['datetime'], format='%d-%m-%Y %H:%M')

# Merge the DataFrames based on the 'Timestamp' and 'datetime' columns
merged_df = df1.merge(df2, left_on='Timestamp', right_on='datetime', how='left')

# Drop the duplicate 'datetime' column
merged_df = merged_df.drop(columns=['datetime'])

# Save the merged DataFrame back to CSV1
merged_df.to_csv('CSV1_updated.csv', index=False)

Outputs:
C:\Users\hifia\AppData\Local\Temp\ipykernel_18936\3320324026.py:2: UserWarning: Parsing dates in %d-%m-%Y %H:%M format when dayfirst=False (the default) was specified. Pass `dayfirst=True` or specify a format to silence this warning.
  df1 = pd.read_csv('../Datasets/Real_Time_Data.csv', parse_dates=['Timestamp'])

--------------------------------------------------

Code:
df = pd.read_csv('Final1.csv').dropna(subset=['Kp'])

# Save the DataFrame back to the CSV file
df.to_csv('Final2.csv', index=False)

Outputs:

--------------------------------------------------


--------------------------------------------------

--------------------------------------------------

2023-10-07 18:22:03

--------------------------------------------------
Code:
import pandas as pd

Outputs:

--------------------------------------------------

Code:
# Read txt file line by line and store to a list
with open('C:/Users/hifia/Projects/NASA SpaceApps/Datasets/Real_Time_Data.txt', 'r') as f:
    lines = f.readlines()
    lines = [line.strip() for line in lines]

print(lines[0:5])

Outputs:

--------------------------------------------------

Code:
import re

def compress_whitespace(input_string):
    # Use a regular expression to replace multiple whitespaces with a single space
    compressed_string = re.sub(r'\s+', ' ', input_string)
    return compressed_string

# Example usage:
fixed = []
for i in lines:
    fixed.append(compress_whitespace(i))


Outputs:

--------------------------------------------------

Code:
print(fixed[0:5])

Outputs:
['\ufeffTimestamp Source Bt-med Bt-min Bt-max Bx-med Bx-min Bx-max By-med By-min By-max Bz-med Bz-min Bz-max Phi-mean Phi-min Phi-max Theta-med Theta-min Theta-max Dens-med Dens-min Dens-max Speed-med Speed-min Speed-max Temp-med Temp-min Temp-max', '2022-10-31 12:00:00 1 4.96 3.41 5.55 1.45 -2.51 3.03 2.80 -4.01 4.54 -3.52 -4.92 -0.71 57.80 1.85 345.43 -46.77 -74.26 -8.52 9.77 6.08 10.79 479.40 457.20 497.00 255620 119723 306989', '2022-10-31 18:00:00 1 4.89 3.58 6.40 -0.49 -3.86 4.89 3.92 0.39 5.53 -0.05 -4.86 3.28 94.77 11.35 157.49 -0.69 -65.95 44.38 10.04 6.29 11.21 471.70 450.30 502.40 246035 123225 291427', '2022-11-01 00:00:00 1 4.66 3.25 5.14 -3.18 -4.66 4.58 0.81 -1.46 3.61 1.91 -4.59 3.98 151.58 0.41 358.68 24.39 -67.33 63.67 8.18 5.43 11.14 462.30 442.90 488.50 202911 98993 329715', '2022-11-01 06:00:00 1 4.03 2.52 5.09 -0.49 -3.71 3.32 1.84 -1.97 3.81 -2.27 -4.77 2.42 106.18 10.34 345.32 -36.56 -79.57 37.08 7.97 4.47 10.04 462.10 427.50 483.60 222950 94413 307277']

--------------------------------------------------

Code:
import csv
import os

os.chdir('C:/Users/hifia/Projects/NASA SpaceApps/Datasets/')
# Define the CSV file name
csv_file_name = 'Real_Time_Data.csv'

# Split the headers and entries
headers = fixed[0].split()
entries = [entry.split() for entry in fixed[1:]]

# Write data to the CSV file
with open(csv_file_name, 'w', newline='') as csv_file:
    csv_writer = csv.writer(csv_file)
    
    # Write the headers
    csv_writer.writerow(headers)
    
    # Write the entries
    csv_writer.writerows(entries)

print(f'Data has been written to {csv_file_name}')


Outputs:
Data has been written to Real_Time_Data.csv

--------------------------------------------------

Code:
import pandas as pd
df = pd.read_csv('../Datasets/Real_Time_Data.csv')
df1 = df.copy()

Outputs:

--------------------------------------------------

Code:
pd.DataFrame(pd.read_json('../Datasets/Kp.json')).to_csv('../Datasets/Kp.csv', index=False)

Outputs:

--------------------------------------------------

Code:
# Load the CSV file into a DataFrame
df = pd.read_csv('../Datasets/Kp.csv')

# Convert the 'datetime' column to a datetime object
df['datetime'] = pd.to_datetime(df['datetime'])

# Format the 'datetime' column to remove the timezone information
df['datetime'] = df['datetime'].dt.strftime('%Y-%m-%d %H:%M:%S')

# Save the DataFrame back to the CSV file
df.to_csv('../Datasets/Kp.csv', index=False)

Outputs:

--------------------------------------------------

Code:
# Load CSV1 and CSV2 into DataFrames
df1 = pd.read_csv('../Datasets/Real_Time_Data.csv', parse_dates=['Timestamp'])
df2 = pd.read_csv('../Datasets/Kp.csv', parse_dates=['datetime'])

df1['Timestamp'] = pd.to_datetime(df1['Timestamp'], format='%d-%m-%Y %H:%M')
df2['datetime'] = pd.to_datetime(df2['datetime'], format='%d-%m-%Y %H:%M')

# Merge the DataFrames based on the 'Timestamp' and 'datetime' columns
merged_df = df1.merge(df2, left_on='Timestamp', right_on='datetime', how='left')

# Drop the duplicate 'datetime' column
merged_df = merged_df.drop(columns=['datetime'])

# Save the merged DataFrame back to CSV1
merged_df.to_csv('CSV1_updated.csv', index=False)

Outputs:
C:\Users\hifia\AppData\Local\Temp\ipykernel_18936\3320324026.py:2: UserWarning: Parsing dates in %d-%m-%Y %H:%M format when dayfirst=False (the default) was specified. Pass `dayfirst=True` or specify a format to silence this warning.
  df1 = pd.read_csv('../Datasets/Real_Time_Data.csv', parse_dates=['Timestamp'])

--------------------------------------------------

Code:
df = pd.read_csv('Final1.csv').dropna(subset=['Kp'])

# Save the DataFrame back to the CSV file
df.to_csv('Final2.csv', index=False)

Outputs:

--------------------------------------------------


--------------------------------------------------

--------------------------------------------------

