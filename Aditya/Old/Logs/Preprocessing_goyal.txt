2023-10-07 15:36:08

--------------------------------------------------
Code:
import pandas as pd

Outputs:

--------------------------------------------------

Code:
df = pd.read_csv("../Dataset/Real_Time_KP_Data.csv")

Outputs:

--------------------------------------------------

Code:
df

Outputs:

--------------------------------------------------

Code:
df.head()

Outputs:

--------------------------------------------------

Code:
df1 = df.copy()

Outputs:

--------------------------------------------------

Code:
df1.info()

Outputs:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1906 entries, 0 to 1905
Data columns (total 30 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   Timestamp  1906 non-null   object 
 1   Source     1906 non-null   int64  
 2   Bt-med     1906 non-null   float64
 3   Bt-min     1906 non-null   float64
 4   Bt-max     1906 non-null   float64
 5   Bx-med     1906 non-null   float64
 6   Bx-min     1906 non-null   float64
 7   Bx-max     1906 non-null   float64
 8   By-med     1906 non-null   float64
 9   By-min     1906 non-null   float64
 10  By-max     1906 non-null   float64
 11  Bz-med     1906 non-null   float64
 12  Bz-min     1906 non-null   float64
 13  Bz-max     1906 non-null   float64
 14  Phi-mean   1906 non-null   float64
 15  Phi-min    1906 non-null   float64
 16  Phi-max    1906 non-null   float64
 17  Theta-med  1906 non-null   float64
 18  Theta-min  1906 non-null   float64
 19  Theta-max  1906 non-null   float64
 20  Dens-med   1906 non-null   float64
 21  Dens-min   1906 non-null   float64
 22  Dens-max   1906 non-null   float64
 23  Speed-med  1906 non-null   float64
 24  Speed-min  1906 non-null   float64
 25  Speed-max  1906 non-null   float64
 26  Temp-med   1906 non-null   int64  
 27  Temp-min   1906 non-null   int64  
 28  Temp-max   1906 non-null   int64  
 29  Kp         1906 non-null   float64
dtypes: float64(25), int64(4), object(1)
memory usage: 446.8+ KB

--------------------------------------------------

Code:
df.describe()

Outputs:

--------------------------------------------------

Code:
df1.isnull().sum()

Outputs:

--------------------------------------------------

Code:
df1.drop('Timestamp',inplace=True, axis=1)

Outputs:

--------------------------------------------------

Code:
corr_matrix = df1.corr()

Outputs:

--------------------------------------------------

Code:
import matplotlib.pyplot as plt
import seaborn as sns

Outputs:

--------------------------------------------------

Code:
plt.figure(figsize=(100,100))
color = plt.get_cmap('viridis').copy()
color.set_bad('lightblue')
sns.heatmap(corr_matrix, annot=True, linewidth=0.4, cmap=color)
plt.legend()
plt.show()

Outputs:
No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.

--------------------------------------------------

Code:
corr_matrix['Kp']

Outputs:

--------------------------------------------------

Code:
from sklearn.model_selection import train_test_split

Outputs:

--------------------------------------------------

Code:
x = df1.iloc[:,:-1]
y = df1.iloc[:,-1]

Outputs:

--------------------------------------------------

Code:
X_train, X_test, y_train, y_test = train_test_split(x, y,
                                                    test_size=0.3,
                                                    random_state=42,
                                                    shuffle = True)

Outputs:

--------------------------------------------------

Code:
from sklearn.linear_model import LinearRegression

Outputs:

--------------------------------------------------

Code:
reg = LinearRegression()

Outputs:

--------------------------------------------------

Code:
reg.fit(X_train,y_train)

Outputs:

--------------------------------------------------

Code:
print(reg.score(X_test, y_test))

Outputs:
0.14743219364888638

--------------------------------------------------

Code:
import numpy as np

Outputs:

--------------------------------------------------

Code:
predictions = reg.predict(X_test)

Outputs:

--------------------------------------------------

Code:
from sklearn.metrics import mean_squared_error, mean_absolute_error

Outputs:

--------------------------------------------------

Code:
print('mean_squared_error : ', mean_squared_error(y_test, predictions)) 
print('mean_absolute_error : ', mean_absolute_error(y_test, predictions)) 

Outputs:
mean_squared_error :  0.6246583570174734
mean_absolute_error :  0.6182304280895685

--------------------------------------------------

Code:
single_sample = [[1,7.58,7.46,7.8,-4.1,-4.26,-3.9,0.15,-0.99,0.59,6.38,6.21,6.59,181,171.42,193.7,56.44,56.07,58.27,7.26,6.8,7.52,479,474.9,483.9,379913,343215,397635
]]

Outputs:

--------------------------------------------------

Code:
prediction = reg.predict(single_sample)

Outputs:
/home/harsh/anaconda3/envs/nasa/lib/python3.10/site-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

--------------------------------------------------

Code:
print("Predicted value:", prediction)

Outputs:
Predicted value: [2.4]

--------------------------------------------------

Code:


Outputs:

--------------------------------------------------


--------------------------------------------------

--------------------------------------------------

2023-10-07 15:59:20

--------------------------------------------------
Code:
import pandas as pd

Outputs:

--------------------------------------------------

Code:
df = pd.read_csv("../Dataset/Real_Time_KP_Data.csv")

Outputs:

--------------------------------------------------

Code:
df

Outputs:

--------------------------------------------------

Code:
df.head()

Outputs:

--------------------------------------------------

Code:
df1 = df.copy()

Outputs:

--------------------------------------------------

Code:
df1.info()

Outputs:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1906 entries, 0 to 1905
Data columns (total 30 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   Timestamp  1906 non-null   object 
 1   Source     1906 non-null   int64  
 2   Bt-med     1906 non-null   float64
 3   Bt-min     1906 non-null   float64
 4   Bt-max     1906 non-null   float64
 5   Bx-med     1906 non-null   float64
 6   Bx-min     1906 non-null   float64
 7   Bx-max     1906 non-null   float64
 8   By-med     1906 non-null   float64
 9   By-min     1906 non-null   float64
 10  By-max     1906 non-null   float64
 11  Bz-med     1906 non-null   float64
 12  Bz-min     1906 non-null   float64
 13  Bz-max     1906 non-null   float64
 14  Phi-mean   1906 non-null   float64
 15  Phi-min    1906 non-null   float64
 16  Phi-max    1906 non-null   float64
 17  Theta-med  1906 non-null   float64
 18  Theta-min  1906 non-null   float64
 19  Theta-max  1906 non-null   float64
 20  Dens-med   1906 non-null   float64
 21  Dens-min   1906 non-null   float64
 22  Dens-max   1906 non-null   float64
 23  Speed-med  1906 non-null   float64
 24  Speed-min  1906 non-null   float64
 25  Speed-max  1906 non-null   float64
 26  Temp-med   1906 non-null   int64  
 27  Temp-min   1906 non-null   int64  
 28  Temp-max   1906 non-null   int64  
 29  Kp         1906 non-null   float64
dtypes: float64(25), int64(4), object(1)
memory usage: 446.8+ KB

--------------------------------------------------

Code:
df.describe()

Outputs:

--------------------------------------------------

Code:
df1.isnull().sum()

Outputs:

--------------------------------------------------

Code:
df1.drop('Timestamp',inplace=True, axis=1)

Outputs:

--------------------------------------------------

Code:
corr_matrix = df1.corr()

Outputs:

--------------------------------------------------

Code:
import matplotlib.pyplot as plt
import seaborn as sns

Outputs:

--------------------------------------------------

Code:
plt.figure(figsize=(100,100))
color = plt.get_cmap('viridis').copy()
color.set_bad('lightblue')
sns.heatmap(corr_matrix, annot=True, linewidth=0.4, cmap=color)
plt.legend()
plt.show()

Outputs:
No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.

--------------------------------------------------

Code:
corr_matrix['Kp']

Outputs:

--------------------------------------------------

Code:
from sklearn.model_selection import train_test_split

Outputs:

--------------------------------------------------

Code:
x = df1.iloc[:,:-1]
y = df1.iloc[:,-1]

Outputs:

--------------------------------------------------

Code:
X_train, X_test, y_train, y_test = train_test_split(x, y,
                                                    test_size=0.3,
                                                    random_state=42,
                                                    shuffle = True)

Outputs:

--------------------------------------------------

Code:
from sklearn.linear_model import LinearRegression

Outputs:

--------------------------------------------------

Code:
reg = LinearRegression()

Outputs:

--------------------------------------------------

Code:
reg.fit(X_train,y_train)

Outputs:

--------------------------------------------------

Code:
print(reg.score(X_test, y_test))

Outputs:
0.14743219364888638

--------------------------------------------------

Code:
import numpy as np

Outputs:

--------------------------------------------------

Code:
predictions = reg.predict(X_test)

Outputs:

--------------------------------------------------

Code:
from sklearn.metrics import mean_squared_error, mean_absolute_error

Outputs:

--------------------------------------------------

Code:
print('mean_squared_error : ', mean_squared_error(y_test, predictions)) 
print('mean_absolute_error : ', mean_absolute_error(y_test, predictions)) 

Outputs:
mean_squared_error :  0.6246583570174734
mean_absolute_error :  0.6182304280895685

--------------------------------------------------

Code:
single_sample = [[1,7.58,7.46,7.8,-4.1,-4.26,-3.9,0.15,-0.99,0.59,6.38,6.21,6.59,181,171.42,193.7,56.44,56.07,58.27,7.26,6.8,7.52,479,474.9,483.9,379913,343215,397635
]]

Outputs:

--------------------------------------------------

Code:
prediction = reg.predict(single_sample)

Outputs:
/home/harsh/anaconda3/envs/nasa/lib/python3.10/site-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

--------------------------------------------------

Code:
print("Predicted value:", prediction)

Outputs:
Predicted value: [2.4]

--------------------------------------------------

Code:


Outputs:

--------------------------------------------------


--------------------------------------------------

--------------------------------------------------

2023-10-07 16:01:53

--------------------------------------------------
Code:
import pandas as pd

Outputs:

--------------------------------------------------

Code:
df = pd.read_csv("../Dataset/Real_Time_KP_Data.csv")

Outputs:

--------------------------------------------------

Code:
df

Outputs:

--------------------------------------------------

Code:
df.head()

Outputs:

--------------------------------------------------

Code:
df1 = df.copy()

Outputs:

--------------------------------------------------

Code:
df1.info()

Outputs:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1906 entries, 0 to 1905
Data columns (total 30 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   Timestamp  1906 non-null   object 
 1   Source     1906 non-null   int64  
 2   Bt-med     1906 non-null   float64
 3   Bt-min     1906 non-null   float64
 4   Bt-max     1906 non-null   float64
 5   Bx-med     1906 non-null   float64
 6   Bx-min     1906 non-null   float64
 7   Bx-max     1906 non-null   float64
 8   By-med     1906 non-null   float64
 9   By-min     1906 non-null   float64
 10  By-max     1906 non-null   float64
 11  Bz-med     1906 non-null   float64
 12  Bz-min     1906 non-null   float64
 13  Bz-max     1906 non-null   float64
 14  Phi-mean   1906 non-null   float64
 15  Phi-min    1906 non-null   float64
 16  Phi-max    1906 non-null   float64
 17  Theta-med  1906 non-null   float64
 18  Theta-min  1906 non-null   float64
 19  Theta-max  1906 non-null   float64
 20  Dens-med   1906 non-null   float64
 21  Dens-min   1906 non-null   float64
 22  Dens-max   1906 non-null   float64
 23  Speed-med  1906 non-null   float64
 24  Speed-min  1906 non-null   float64
 25  Speed-max  1906 non-null   float64
 26  Temp-med   1906 non-null   int64  
 27  Temp-min   1906 non-null   int64  
 28  Temp-max   1906 non-null   int64  
 29  Kp         1906 non-null   float64
dtypes: float64(25), int64(4), object(1)
memory usage: 446.8+ KB

--------------------------------------------------

Code:
df.describe()

Outputs:

--------------------------------------------------

Code:
df1.isnull().sum()

Outputs:

--------------------------------------------------

Code:
df1.drop('Timestamp',inplace=True, axis=1)

Outputs:

--------------------------------------------------

Code:
corr_matrix = df1.corr()

Outputs:

--------------------------------------------------

Code:
import matplotlib.pyplot as plt
import seaborn as sns

Outputs:

--------------------------------------------------

Code:
plt.figure(figsize=(100,100))
color = plt.get_cmap('viridis').copy()
color.set_bad('lightblue')
sns.heatmap(corr_matrix, annot=True, linewidth=0.4, cmap=color)
plt.legend()
plt.show()

Outputs:
No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.

--------------------------------------------------

Code:
corr_matrix['Kp']

Outputs:

--------------------------------------------------

Code:
from sklearn.model_selection import train_test_split

Outputs:

--------------------------------------------------

Code:
x = df1.iloc[:,:-1]
y = df1.iloc[:,-1]

Outputs:

--------------------------------------------------

Code:
X_train, X_test, y_train, y_test = train_test_split(x, y,
                                                    test_size=0.3,
                                                    random_state=42,
                                                    shuffle = True)

Outputs:

--------------------------------------------------

Code:
from sklearn.linear_model import LinearRegression

Outputs:

--------------------------------------------------

Code:
reg = LinearRegression()

Outputs:

--------------------------------------------------

Code:
reg.fit(X_train,y_train)

Outputs:

--------------------------------------------------

Code:
print(reg.score(X_test, y_test))

Outputs:
0.14743219364888638

--------------------------------------------------

Code:
import numpy as np

Outputs:

--------------------------------------------------

Code:
predictions = reg.predict(X_test)

Outputs:

--------------------------------------------------

Code:
from sklearn.metrics import mean_squared_error, mean_absolute_error

Outputs:

--------------------------------------------------

Code:
print('mean_squared_error : ', mean_squared_error(y_test, predictions)) 
print('mean_absolute_error : ', mean_absolute_error(y_test, predictions)) 

Outputs:
mean_squared_error :  0.6246583570174734
mean_absolute_error :  0.6182304280895685

--------------------------------------------------

Code:
single_sample = [[1,7.58,7.46,7.8,-4.1,-4.26,-3.9,0.15,-0.99,0.59,6.38,6.21,6.59,181,171.42,193.7,56.44,56.07,58.27,7.26,6.8,7.52,479,474.9,483.9,379913,343215,397635
]]

Outputs:

--------------------------------------------------

Code:
prediction = reg.predict(single_sample)

Outputs:
/home/harsh/anaconda3/envs/nasa/lib/python3.10/site-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

--------------------------------------------------

Code:
print("Predicted value:", prediction)

Outputs:
Predicted value: [2.4]

--------------------------------------------------

Code:


Outputs:

--------------------------------------------------


--------------------------------------------------

--------------------------------------------------

2023-10-07 18:22:03

--------------------------------------------------
Code:
import pandas as pd

Outputs:

--------------------------------------------------

Code:
df = pd.read_csv("../Dataset/Real_Time_KP_Data.csv")

Outputs:

--------------------------------------------------

Code:
df

Outputs:

--------------------------------------------------

Code:
df.head()

Outputs:

--------------------------------------------------

Code:
df1 = df.copy()

Outputs:

--------------------------------------------------

Code:
df1.info()

Outputs:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1906 entries, 0 to 1905
Data columns (total 30 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   Timestamp  1906 non-null   object 
 1   Source     1906 non-null   int64  
 2   Bt-med     1906 non-null   float64
 3   Bt-min     1906 non-null   float64
 4   Bt-max     1906 non-null   float64
 5   Bx-med     1906 non-null   float64
 6   Bx-min     1906 non-null   float64
 7   Bx-max     1906 non-null   float64
 8   By-med     1906 non-null   float64
 9   By-min     1906 non-null   float64
 10  By-max     1906 non-null   float64
 11  Bz-med     1906 non-null   float64
 12  Bz-min     1906 non-null   float64
 13  Bz-max     1906 non-null   float64
 14  Phi-mean   1906 non-null   float64
 15  Phi-min    1906 non-null   float64
 16  Phi-max    1906 non-null   float64
 17  Theta-med  1906 non-null   float64
 18  Theta-min  1906 non-null   float64
 19  Theta-max  1906 non-null   float64
 20  Dens-med   1906 non-null   float64
 21  Dens-min   1906 non-null   float64
 22  Dens-max   1906 non-null   float64
 23  Speed-med  1906 non-null   float64
 24  Speed-min  1906 non-null   float64
 25  Speed-max  1906 non-null   float64
 26  Temp-med   1906 non-null   int64  
 27  Temp-min   1906 non-null   int64  
 28  Temp-max   1906 non-null   int64  
 29  Kp         1906 non-null   float64
dtypes: float64(25), int64(4), object(1)
memory usage: 446.8+ KB

--------------------------------------------------

Code:
df.describe()

Outputs:

--------------------------------------------------

Code:
df1.isnull().sum()

Outputs:

--------------------------------------------------

Code:
df1.drop('Timestamp',inplace=True, axis=1)

Outputs:

--------------------------------------------------

Code:
corr_matrix = df1.corr()

Outputs:

--------------------------------------------------

Code:
import matplotlib.pyplot as plt
import seaborn as sns

Outputs:

--------------------------------------------------

Code:
plt.figure(figsize=(100,100))
color = plt.get_cmap('viridis').copy()
color.set_bad('lightblue')
sns.heatmap(corr_matrix, annot=True, linewidth=0.4, cmap=color)
plt.legend()
plt.show()

Outputs:
No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.

--------------------------------------------------

Code:
corr_matrix['Kp']

Outputs:

--------------------------------------------------

Code:
from sklearn.model_selection import train_test_split

Outputs:

--------------------------------------------------

Code:
x = df1.iloc[:,:-1]
y = df1.iloc[:,-1]

Outputs:

--------------------------------------------------

Code:
X_train, X_test, y_train, y_test = train_test_split(x, y,
                                                    test_size=0.3,
                                                    random_state=42,
                                                    shuffle = True)

Outputs:

--------------------------------------------------

Code:
from sklearn.linear_model import LinearRegression

Outputs:

--------------------------------------------------

Code:
reg = LinearRegression()

Outputs:

--------------------------------------------------

Code:
reg.fit(X_train,y_train)

Outputs:

--------------------------------------------------

Code:
print(reg.score(X_test, y_test))

Outputs:
0.14743219364888638

--------------------------------------------------

Code:
import numpy as np

Outputs:

--------------------------------------------------

Code:
predictions = reg.predict(X_test)

Outputs:

--------------------------------------------------

Code:
from sklearn.metrics import mean_squared_error, mean_absolute_error

Outputs:

--------------------------------------------------

Code:
print('mean_squared_error : ', mean_squared_error(y_test, predictions)) 
print('mean_absolute_error : ', mean_absolute_error(y_test, predictions)) 

Outputs:
mean_squared_error :  0.6246583570174734
mean_absolute_error :  0.6182304280895685

--------------------------------------------------

Code:
single_sample = [[1,7.58,7.46,7.8,-4.1,-4.26,-3.9,0.15,-0.99,0.59,6.38,6.21,6.59,181,171.42,193.7,56.44,56.07,58.27,7.26,6.8,7.52,479,474.9,483.9,379913,343215,397635
]]

Outputs:

--------------------------------------------------

Code:
prediction = reg.predict(single_sample)

Outputs:
/home/harsh/anaconda3/envs/nasa/lib/python3.10/site-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(

--------------------------------------------------

Code:
print("Predicted value:", prediction)

Outputs:
Predicted value: [2.4]

--------------------------------------------------

Code:


Outputs:

--------------------------------------------------


--------------------------------------------------

--------------------------------------------------

